{"ast":null,"code":"var _jsxFileName = \"/Users/jaydentan/SpotifyMV/client/src/views/main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './main.css';\nimport Navbar from \"./components/navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Main() {\n  _s();\n  const searchParams = new URLSearchParams(window.location.search);\n\n  //spotify vars\n  const [user, setUser] = useState();\n  const [isPlaying, setPlaying] = useState(false);\n  const [nextState, setNext] = useState(false);\n\n  //spotify authentication\n  const [accessToken, setToken] = useState(searchParams.get('access_token'));\n  const [refreshToken, setRefresh] = useState(searchParams.get('refresh_token'));\n\n  //spotify song info\n  const [song, setSong] = useState(\"Play a song on your Spotify Player!\");\n  const [songImg, setImg] = useState();\n\n  //youtube vars\n  const [videoId, setvideoId] = useState(\"ZncbtRo7RXs?si=ohl4WCuqvY0JJKub\");\n  const API_KEY = \"AIzaSyBxfXvl8QvKRfIQaEJInzvPhKVHCFwPk0o\";\n  const getRefreshToken = async () => {\n    try {\n      const result = await fetch(`http://localhost:3001/refresh_token/${refreshToken}`);\n      if (!result.ok) {\n        throw new Error(`Network response was not ok: ${result.statusText}`);\n      }\n      const token = JSON.parse(await result.text());\n      setToken(token.access_token);\n      setRefresh(token.refresh_token);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  //get new access token every hour\n  useEffect(() => {\n    const intervalId = setInterval(getRefreshToken, 3600000);\n    return () => clearInterval(intervalId);\n  });\n  const checkPlayState = async () => {\n    try {\n      const result = await fetch('https://api.spotify.com/v1/me/player', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      try {\n        const data = JSON.parse(await result.text());\n        setPlaying(data.is_playing);\n        if (isPlaying) {\n          try {\n            if (song != data.item.name + \" by \" + data.item.artists[0]['name']) {\n              setNext(!nextState);\n            } else {\n              return;\n            }\n            setSong(data.item.name + \" by \" + data.item.artists[0]['name']);\n            setImg(data.item.album.images[0].url);\n          } catch {\n            setSong(\"Advertisement Break\");\n          }\n        } else {\n          setSong(\"Play a song on your Spotify Player!\");\n        }\n      } catch {\n        setPlaying(false);\n      }\n    } catch (error) {\n      console.error(error);\n      setPlaying(false);\n    }\n  };\n  useEffect(() => {\n    const intervalId = setInterval(checkPlayState, 4000);\n    return () => clearInterval(intervalId);\n  });\n  async function getVideoID() {\n    try {\n      const result = await fetch(`https://www.googleapis.com/youtube/v3/search?key=${API_KEY}&q=${song} Song Official MV&type=video&part=snippet&maxResults=1`);\n      const data = await result.json();\n      setvideoId(data.items[0].id.videoId);\n    } catch {\n      alert(\"Limited to 100 songs a day!\");\n      setvideoId(\"m6pTbEz4w3o?si=63bgCZ2ABohgz8_1\");\n      return;\n    }\n  }\n  useEffect(() => {\n    if (isPlaying) {\n      getVideoID();\n    }\n  }, [nextState]);\n  async function getUserName() {\n    try {\n      const result = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      const data = await result.json();\n      setUser(data.display_name);\n    } catch {\n      setUser('ERROR');\n    }\n  }\n  //gets user name everytime the component renders\n  useEffect(() => {\n    getUserName();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      name: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mvPlayer\",\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        className: \"player\",\n        src: `https://www.youtube.com/embed/${videoId}?autoplay=1`,\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true,\n        title: \"YouTube video player\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"description\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: songImg,\n        alt: \"Album Cover\",\n        className: \"albumCover\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), song]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n}\n_s(Main, \"QBqpcBQtBNWTNzkGRlwUO/iJMmA=\");\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","jsxDEV","_jsxDEV","Main","_s","searchParams","URLSearchParams","window","location","search","user","setUser","isPlaying","setPlaying","nextState","setNext","accessToken","setToken","get","refreshToken","setRefresh","song","setSong","songImg","setImg","videoId","setvideoId","API_KEY","getRefreshToken","result","fetch","ok","Error","statusText","token","JSON","parse","text","access_token","refresh_token","error","console","intervalId","setInterval","clearInterval","checkPlayState","method","headers","data","is_playing","item","name","artists","album","images","url","getVideoID","json","items","id","alert","getUserName","display_name","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","allow","allowFullScreen","title","alt","_c","$RefreshReg$"],"sources":["/Users/jaydentan/SpotifyMV/client/src/views/main.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './main.css';\nimport Navbar from \"./components/navbar\";\n\nexport default function Main(){\n    const searchParams = new URLSearchParams(window.location.search);\n\n    //spotify vars\n    const [user, setUser] = useState()\n    const [isPlaying, setPlaying] = useState(false);\n    const [nextState, setNext] = useState(false);\n\n    //spotify authentication\n    const [accessToken, setToken] = useState(searchParams.get('access_token'));\n    const [refreshToken, setRefresh] = useState(searchParams.get('refresh_token'))\n\n    //spotify song info\n    const [song, setSong] = useState(\"Play a song on your Spotify Player!\");\n    const [songImg, setImg] = useState();\n\n    //youtube vars\n    const [videoId, setvideoId] = useState(\"ZncbtRo7RXs?si=ohl4WCuqvY0JJKub\");\n    const API_KEY = \"AIzaSyBxfXvl8QvKRfIQaEJInzvPhKVHCFwPk0o\";\n\n    const getRefreshToken = async () => {\n        try {\n            const result = await fetch(`http://localhost:3001/refresh_token/${refreshToken}`);\n            if (!result.ok){\n                throw new Error(`Network response was not ok: ${result.statusText}`);\n            }\n            const token = JSON.parse(await result.text());\n            setToken(token.access_token);\n            setRefresh(token.refresh_token);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    //get new access token every hour\n    useEffect(() => {\n        const intervalId = setInterval(getRefreshToken, 3600000);\n        return () => clearInterval(intervalId);\n    })\n\n    const checkPlayState = async () => {\n        try {\n            const result = await fetch('https://api.spotify.com/v1/me/player', {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                }\n            });\n            try {\n                const data = JSON.parse(await result.text());\n                setPlaying(data.is_playing);\n                if (isPlaying){\n                    try{\n                        if (song != data.item.name + \" by \" + data.item.artists[0]['name']){\n                            setNext(!nextState);\n                        } else {\n                            return;\n                        }\n                        setSong(data.item.name + \" by \" + data.item.artists[0]['name']);\n                        setImg(data.item.album.images[0].url)\n                    } catch {\n                        setSong(\"Advertisement Break\")\n                    }\n                } else {\n                    setSong(\"Play a song on your Spotify Player!\");\n                }\n            } catch {\n                setPlaying(false);\n            }\n        } catch (error){\n            console.error(error);\n            setPlaying(false);\n        }\n    }\n    useEffect(() => {\n        const intervalId = setInterval(checkPlayState, 4000);\n        return () => clearInterval(intervalId);\n    });\n\n    async function getVideoID(){\n        try {\n            const result = await fetch(`https://www.googleapis.com/youtube/v3/search?key=${API_KEY}&q=${song} Song Official MV&type=video&part=snippet&maxResults=1`);\n            const data = await result.json();\n            setvideoId(data.items[0].id.videoId);\n        } catch {\n            alert(\"Limited to 100 songs a day!\");\n            setvideoId(\"m6pTbEz4w3o?si=63bgCZ2ABohgz8_1\");\n            return;\n        }\n    }\n    useEffect(() => {\n        if (isPlaying){\n            getVideoID();\n        }\n    }, [nextState])\n\n    async function getUserName() {\n        try {\n            const result = await fetch('https://api.spotify.com/v1/me', {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                }\n            });\n            const data = await result.json();\n            setUser(data.display_name);\n        } catch {\n            setUser('ERROR');\n        }\n    }\n    //gets user name everytime the component renders\n    useEffect(() => {\n        getUserName();\n    })\n\n    return (\n        <div className=\"bg\">\n            <Navbar name={user}/>\n            <div className=\"mvPlayer\">\n                <iframe\n                    className=\"player\"\n                    src={`https://www.youtube.com/embed/${videoId}?autoplay=1`}\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                    title=\"YouTube video player\"\n                ></iframe>\n            </div>\n            <div className=\"description\">\n                <img src={songImg} alt=\"Album Cover\" className=\"albumCover\"></img>\n                {song}\n            </div>\n            <h1></h1>\n        </div>\n    )\n}\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}