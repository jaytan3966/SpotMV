{"ast":null,"code":"var _jsxFileName = \"/Users/jaydentan/SpotifyMV/client/src/views/main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport './main.css';\nimport Navbar from \"./components/navbar\";\nimport Youtube, { YouTubePlayer } from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet videoElement = YouTubePlayer;\nexport default function Main() {\n  _s();\n  const searchParams = new URLSearchParams(window.location.search);\n\n  //spotify vars\n  const [song, setSong] = useState(\"Play a song on your Spotify Player!\");\n  const [user, setUser] = useState();\n  const [isPlaying, setPlaying] = useState(false);\n  const [nextState, setNext] = useState(false);\n  const [accessToken, setToken] = useState(searchParams.get('access_token'));\n  const [refreshToken, setRefresh] = useState(searchParams.get('refresh_token'));\n\n  //youtube vars\n  const [videoId, setvideoId] = useState(\"1XqIWr_WqM4\");\n  const API_KEY = \"AIzaSyBuf83t9pfPd0GJPaFwqg-gkIP6dx195Zw\";\n  const getRefreshToken = async () => {\n    try {\n      const result = await fetch(`http://localhost:3001/refresh_token/${refreshToken}`);\n      if (!result.ok) {\n        throw new Error(`Network response was not ok: ${result.statusText}`);\n      }\n      const token = JSON.parse(await result.text());\n      setToken(token.access_token);\n      setRefresh(token.refresh_token);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  //get new access token every hour\n  useEffect(() => {\n    const intervalId = setInterval(getRefreshToken, 3600000);\n    return () => clearInterval(intervalId);\n  });\n  const checkPlayState = async () => {\n    try {\n      const result = await fetch('https://api.spotify.com/v1/me/player', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      try {\n        const data = JSON.parse(await result.text());\n        setPlaying(data.is_playing);\n        if (isPlaying) {\n          try {\n            if (song != data.item.name + \" by \" + data.item.artists[0]['name']) {\n              setNext(!nextState);\n            } else {\n              return;\n            }\n            setSong(data.item.name + \" by \" + data.item.artists[0]['name']);\n            YouTubePlayer.target.playVideo();\n          } catch {\n            setSong(\"Advertisement Break\");\n          }\n        } else {\n          YouTubePlayer.target.pauseVideo();\n          setSong(\"Play a song on your Spotify Player!\");\n        }\n      } catch {\n        setPlaying(false);\n      }\n    } catch (error) {\n      console.error(error);\n      setPlaying(false);\n    }\n  };\n  useEffect(() => {\n    const intervalId = setInterval(checkPlayState, 4000);\n    return () => clearInterval(intervalId);\n  });\n  async function getVideoID() {\n    try {\n      const result = await fetch(`https://www.googleapis.com/youtube/v3/search?key=${API_KEY}&q=${song} Song Official MV&type=video&part=snippet&maxResults=1`);\n      const data = await result.json();\n      setvideoId(data.items[0].id.videoId);\n    } catch {\n      alert(\"Limited to 100 songs a day!\");\n    }\n  }\n  useEffect(() => {\n    getVideoID();\n  }, [nextState]);\n  async function getUserName() {\n    try {\n      const result = await fetch('https://api.spotify.com/v1/me', {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      const data = await result.json();\n      setUser(data.display_name);\n    } catch {\n      setUser('ERROR');\n    }\n  }\n  //gets user name everytime the component renders\n  useEffect(() => {\n    getUserName();\n  });\n  const opts = {\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      name: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mvPlayer\",\n      children: /*#__PURE__*/_jsxDEV(Youtube, {\n        videoId: videoId,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: song\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 9\n  }, this);\n}\n_s(Main, \"AOsMM32tTZV7OyIlUTm4Q9RLoIY=\");\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","Navbar","Youtube","YouTubePlayer","jsxDEV","_jsxDEV","videoElement","Main","_s","searchParams","URLSearchParams","window","location","search","song","setSong","user","setUser","isPlaying","setPlaying","nextState","setNext","accessToken","setToken","get","refreshToken","setRefresh","videoId","setvideoId","API_KEY","getRefreshToken","result","fetch","ok","Error","statusText","token","JSON","parse","text","access_token","refresh_token","error","console","intervalId","setInterval","clearInterval","checkPlayState","method","headers","data","is_playing","item","name","artists","target","playVideo","pauseVideo","getVideoID","json","items","id","alert","getUserName","display_name","opts","playerVars","autoplay","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jaydentan/SpotifyMV/client/src/views/main.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './main.css';\nimport Navbar from \"./components/navbar\";\nimport Youtube, {YouTubePlayer} from 'react-youtube'\n\nlet videoElement = YouTubePlayer;\n\nexport default function Main(){\n    const searchParams = new URLSearchParams(window.location.search);\n\n    //spotify vars\n    const [song, setSong] = useState(\"Play a song on your Spotify Player!\");\n    const [user, setUser] = useState()\n    const [isPlaying, setPlaying] = useState(false);\n    const [nextState, setNext] = useState(false);\n    const [accessToken, setToken] = useState(searchParams.get('access_token'));\n    const [refreshToken, setRefresh] = useState(searchParams.get('refresh_token'))\n\n    //youtube vars\n    const [videoId, setvideoId] = useState(\"1XqIWr_WqM4\");\n    const API_KEY = \"AIzaSyBuf83t9pfPd0GJPaFwqg-gkIP6dx195Zw\";\n\n    const getRefreshToken = async () => {\n        try {\n            const result = await fetch(`http://localhost:3001/refresh_token/${refreshToken}`);\n            if (!result.ok){\n                throw new Error(`Network response was not ok: ${result.statusText}`);\n            }\n            const token = JSON.parse(await result.text());\n            setToken(token.access_token);\n            setRefresh(token.refresh_token);\n        } catch (error) {\n            console.error(error);\n        }\n    }\n    //get new access token every hour\n    useEffect(() => {\n        const intervalId = setInterval(getRefreshToken, 3600000);\n        return () => clearInterval(intervalId);\n    })\n\n    const checkPlayState = async () => {\n        try {\n            const result = await fetch('https://api.spotify.com/v1/me/player', {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                }\n            });\n            try {\n                const data = JSON.parse(await result.text());\n                setPlaying(data.is_playing);\n                if (isPlaying){\n                    try{\n                        if (song != data.item.name + \" by \" + data.item.artists[0]['name']){\n                            setNext(!nextState);\n                        } else {\n                            return;\n                        }\n                        setSong(data.item.name + \" by \" + data.item.artists[0]['name']);\n                        YouTubePlayer.target.playVideo();\n                    } catch {\n                        setSong(\"Advertisement Break\")\n                    }\n                } else {\n                    YouTubePlayer.target.pauseVideo();\n                    setSong(\"Play a song on your Spotify Player!\");\n                }\n            } catch {\n                setPlaying(false);\n            }\n        } catch (error){\n            console.error(error);\n            setPlaying(false);\n        }\n    }\n    useEffect(() => {\n        const intervalId = setInterval(checkPlayState, 4000);\n        return () => clearInterval(intervalId);\n    });\n\n    async function getVideoID(){\n        try {\n            const result = await fetch(`https://www.googleapis.com/youtube/v3/search?key=${API_KEY}&q=${song} Song Official MV&type=video&part=snippet&maxResults=1`);\n            const data = await result.json();\n            setvideoId(data.items[0].id.videoId);\n        } catch {\n            alert(\"Limited to 100 songs a day!\")\n        }\n    }\n    useEffect(() => {\n        getVideoID();\n    }, [nextState])\n\n    async function getUserName() {\n        try {\n            const result = await fetch('https://api.spotify.com/v1/me', {\n                method: 'GET',\n                headers: {\n                    'Authorization': `Bearer ${accessToken}`\n                }\n            });\n            const data = await result.json();\n            setUser(data.display_name);\n        } catch {\n            setUser('ERROR');\n        }\n    }\n    //gets user name everytime the component renders\n    useEffect(() => {\n        getUserName();\n    })\n    \n    const opts = {\n        playerVars: {\n          autoplay: 1\n        }\n      };\n\n    return (\n        <div className=\"bg\">\n            <Navbar name={user}/>\n            <div className=\"mvPlayer\">\n                <Youtube videoId={videoId} opts={opts}/>\n            </div>\n            <h1>{song}</h1>\n        </div>\n        \n    )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}